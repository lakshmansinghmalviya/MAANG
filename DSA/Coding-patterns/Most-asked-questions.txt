LeetCode Problems to crack your next Coding Interview

I’ve compiled some top LeetCode problems to help you prepare for tech interviews at companies like MAANG.

1.LinkedList
- Linked List Cycle: https://lnkd.in/dnAGVP7X
- Remove Duplicates from Sorted List: https://lnkd.in/dEJq497F
- Add 2 Numbers: https://lnkd.in/dDjjgRG2

2.Stack
- Valid Parentheses: https://lnkd.in/dAiX-jhi
- Reverse Linked List: https://lnkd.in/dDPumxGi

3.Heap, PriorityQueue
- Kth Largest Element in Stream: https://lnkd.in/dx7SiVzi
- Top K Frequent Elements: https://lnkd.in/dNe-pBYt
- Find K Pairs with Smallest Sums: https://lnkd.in/dGGK-mns

4. HashMap
- 2 Sum: https://lnkd.in/dX2cJCxY
- Group Anagrams: https://lnkd.in/dPyN_Vdz
- Intersection of Two Arrays: https://lnkd.in/dBc9pyar
- Unique Email Addresses: https://lnkd.in/dtEJDmwc
- First Unique Character in a String: https://lnkd.in/de8bhZV3
- Subarray Sum Equals K: https://lnkd.in/dJ6uUNrc

5. Graph, BFS, DFS
- No of Islands: https://lnkd.in/d_znvSrB
- Max Area of Island: https://lnkd.in/djUjEbZP
- No of Connected Components in an Undirected Graph: https://lnkd.in/dAvxWnpR
- Word Ladder: https://lnkd.in/d_s3qbVs

6. Tree, BT, BST
- Max Depth of BT: https://lnkd.in/dfhSj-Zr
- Min Depth of BT: https://lnkd.in/dRcQe_ED
- Merge Two BT: https://lnkd.in/dj-8btTa
- Convert Sorted Array to BST: https://lnkd.in/dudvZrYH
- Path Sum: https://lnkd.in/dGtJSr7E
- BT Level Order Traversal: https://lnkd.in/dsgjKAs7
- BT Zigzag Level Order Traversal: https://lnkd.in/dCC9jgZ3
- Validate BST : https://lnkd.in/dszF-xdg
- Construct BT from Pre & In order Traversal: https://lnkd.in/dBdwkFWR

7. Sort (Insertion, Selection, Bubble, Shell, Heap & Quick)
- https://lnkd.in/dsrP_PhX
- https://lnkd.in/d_CK82Uy
- https://lnkd.in/d3e3MfYy
- https://lnkd.in/dsYcWb85
- https://lnkd.in/dBdPNEBe
- https://lnkd.in/dZwZGZKA
- https://lnkd.in/dJbkiD2s

8. Dynamic Programming
- Paint Fence: https://lnkd.in/d86eqUyB
- Longest Increasing Subsequence: https://lnkd.in/demqM35f
- Maximum Subarray: https://lnkd.in/dpPSAUZw
- Unique Paths: https://lnkd.in/dtGQ5rDg
- House Robber: https://lnkd.in/dkZNnt-6
- Word Break: https://lnkd.in/d65BDk3f
- Coin Change: https://lnkd.in/dZR5xfaD

9. Binary Search
- Search Insert Position: https://lnkd.in/dvqdNAsN
- Find Minimum in Rotated Sorted Array: https://lnkd.in/dU5brYBY
- Search in Rotated Sorted Array: https://lnkd.in/dH-HCpQU
- Capacity To Ship Packages Within D Days: https://lnkd.in/dxXxtju6

10. Recursion
- Pow(x, n): https://lnkd.in/dycw4mfh
- Kth Symbol in Grammar: https://lnkd.in/duZezdAc
- Split BST: https://lnkd.in/dM-tJMne

11. Sliding window
- Longest Substring Without Repeating Characters: https://lnkd.in/dSYVqpCq
- Min Size Subarray Sum: https://lnkd.in/dVyGGHNh

12. Greedy + Backtracking
- Permutations: https://lnkd.in/d52RXYHJ
- Subsets: https://lnkd.in/dFhRGwM3
- Combination Sum: https://lnkd.in/dPu62b9S
- Generate Parentheses: https://lnkd.in/dWXsUisE






40 most asked DSA questions to clear your next interview 

Save for Yourself & Share to help others :)

1. Reverse a linked list.
2. Find the middle element of a linked list.
3. Implement a stack using arrays/linked list.
4. Implement a queue using arrays/linked list.
5. Find the factorial of a number using recursion.
6. Implement binary search in an array.
7. Find the largest/smallest element in an array.
8. Implement merge sort.
9. Implement quick sort.
10. Detect a cycle in a linked list.
11. Find the intersection point of two linked lists.
12. Check if a binary tree is a binary search tree (BST).
13. Print all leaf nodes of a binary tree.
14. Reverse a binary tree.
15. Find the height of a binary tree.
16. Implement depth-first search (DFS) on a graph.
17. Implement breadth-first search (BFS) on a graph.
18. Check if a graph is connected.
19. Implement Dijkstra's algorithm for shortest path.
20. Implement Prim's algorithm for minimum spanning tree.
21. Implement Kruskal's algorithm for minimum spanning tree.
22. Find the longest common subsequence of two strings.
23. Find the longest increasing subsequence of an array.
24. Implement the Knuth–Morris–Pratt (KMP) algorithm for string matching.
25. Implement the Rabin-Karp algorithm for string matching.
26. Check if a string is a palindrome.
27. Check if two strings are anagrams of each other.
28. Find the next greater element in an array.
29. Find the kth smallest/largest element in an array.
30. Find the median of two sorted arrays.
31. Implement a trie (prefix tree).
32. Find all subsets of a set.
33. Find all permutations of a string.
34. Implement the Josephus Problem.
35. Implement an LRU (Least Recently Used) Cache.
36. Find the longest palindrome substring in a string.
37. Implement a priority queue.
38. Implement a hashmap (dictionary).
39. Count the number of inversions in an array.
40. Find the shortest path in a maze.